name: tests

#on: [gollum]
on: [push, pull_request]

jobs:
  cs-check:
    name: Library coding style check
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0

      - name: Coding Standards Check
        shell: bash
        run: |
          echo "::group::Accquire composer dependencies"
          composer update -o --ignore-platform-reqs
          composer update -o
          echo "::endgroup::"
          echo "::group::Run cs-check"
          composer cs-check -- -v
  unix-tests:
    name: PHP ${{ matrix.php-version }} ${{ matrix.ts }} Test on ${{ matrix.os }}
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        #os: [macos-latest]
        php-version: ['8.1', '8.0']
        #php-version: ['8.0']
        #ts: ['nts', 'ts']
      max-parallel: 8
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup extension dependencies
        run: |
          if [ ${{ runner.os }} = 'Linux' ]
          then
            sudo apt-get update
            sudo apt-get install -yqq libcurl4-openssl-dev lcov
          else
            brew install lcov
          fi

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: phpize
          # ini-values: pcov.directory=lib
          # coverage: pcov
          coverage: none
          extensions: curl,openssl,sockets,ffi
        #env:
          #phpts: ${{ matrix.ts }}

      - name: Build Swow extension
        run: |
          cd ext
          printf "\033[1mRun phpize\033[0m\n"
          phpize
          printf "\033[1mStart configure\033[0m\n"
          ./configure --enable-swow\
            --enable-swow-debug \
            --enable-swow-gcov \
            --enable-swow-ssl=${{ runner.os == 'Linux' && 'yes' || '/usr/local/opt/openssl' }} \
            --enable-swow-curl=${{ runner.os == 'Linux' && 'yes' || '/usr/local/opt/curl' }}
          printf "\033[1mStart build Swow\033[0m\n"
          make -j`${{ runner.os == 'Linux' && 'nproc' || 'sysctl -n hw.logicalcpu' }}`
          printf "\033[1mDone build Swow\033[0m\n"
          php -n -d extension=.libs/swow.so --ri swow
          printf "\033[1mInstall Swow\033[0m\n"
          ${{ runner.os == 'Linux' && 'sudo' || ''}} make install-modules

      - name: Run extension tests
        id: ext-test
        continue-on-error: true
        run: |
          composer test-extension -- \
            -j`${{ runner.os == 'Linux' && 'nproc' || 'sysctl -n hw.logicalcpu' }}`

      - name: Setup composer dependencies
        run: composer update -o --ignore-platform-reqs

      - name: Run library tests
        run: composer test-library

      - name: Fail if anything failed
        if: steps.ext-test.outcome != 'success'
        run: exit 1

      - name: Coverage tests
        shell: bash
        run: |
          [ x"${{ secrets.CODECOV_TOKEN }}" != x"" ] || {
            echo "No CODECOV_TOKEN set, skipping coverage tests"
            exit 0
          }
          lcov \
            --capture \
            --directory "ext/src" \
            --directory "ext/include" \
            --output-file coverage.info &&
          lcov \
            --extract coverage.info \
              "${{github.workspace}}/ext/include/*" \
              "${{github.workspace}}/ext/src/*" \
            --output-file coverage.info &&
          lcov --list coverage.info &&
          curl -s https://codecov.io/bash -o codecov.sh &&
          chmod +x codecov.sh &&
          ./codecov.sh -f coverage.info -t ${{ secrets.CODECOV_TOKEN }}

  windows-tests:
    name: PHP ${{ matrix.php-version }} ${{ matrix.ts }} Test on windows-2019
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.0"]
        ts: [ 'nts', 'ts' ]
      max-parallel: 8
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # TODO: windows varient of setup-php seems to be so slow
      #       shell we add caches?
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          # ini-values: pcov.directory=lib
          # coverage: pcov
          coverage: none
          extensions: curl,openssl,sockets,ffi
        env:
          phpts: ${{ matrix.ts }}

      - name: Build Swow extension
        uses: ./.github/workflows/winext
        with:
          ext-path: ./ext
          tools-path: C:\tools\phpdev
          conf-args: --enable-swow-debug --enable-swow-ssl --enable-swow-curl --enable-debug-pack
          ext-name: swow
          deps: openssl,libcurl,libssh2,zlib,nghttp2

      - name: Prepare coverage dependencies
        shell: powershell
        run: |
          $headers = @{
            "accept"="application/vnd.github.v3+json";
            "content-type"="application/json";
            "authorization"="Bearer ${{github.token}}";
          }
          # get latest OpenCppCoverage download path
          Write-Host "Fetching latest OpenCppCoverage download path"
          $info = Invoke-WebRequest `
            -UseBasicParsing `
            -Headers $headers `
            -Uri https://api.github.com/repos/OpenCppCoverage/OpenCppCoverage/releases/latest `
              | ConvertFrom-Json
          foreach ($x in $info.assets) {
            if ($x.name.EndsWith('.exe')) {
              Write-Host "Downloading latest OpenCppCoverage"
              $uri = $x.browser_download_url
              Invoke-WebRequest -Uri $uri -OutFile OpenCppCoverage.exe -Headers $headers -UseBasicParsing
              break
            }
          }
          # install OpenCppCoverage
          Write-Host "Installing OpenCppCoverage"
          & .\OpenCppCoverage.exe /SP- /NORESTART /VERYSILENT /DIR=C:\OpenCppCoverage
          # get latest codecov uploader download path
          Write-Host "Fetching latest codecov uploader download path"
          $info = Invoke-WebRequest `
            -UseBasicParsing `
            -Headers $headers `
            -Uri https://api.github.com/repos/codecov/codecov-exe/releases/latest `
              | ConvertFrom-Json
          foreach ($x in $info.assets) {
            if ($x.name.EndsWith('win7-x64.zip')) {
              Write-Host "Downloading latest codecov uploader"
              $uri = $x.browser_download_url
              Invoke-WebRequest -Uri $uri -OutFile codecov.zip -Headers $headers -UseBasicParsing
              break
            }
          }
          # unzip it
          Write-Host "Extracting codecov uploader"
          New-Item C:\Codecov -ItemType Container | Out-Null
          Expand-Archive .\codecov.zip -DestinationPath C:\Codecov

      - name: Run extension tests
        shell: pwsh
        id: ext-test
        continue-on-error: true
        run: |
          & C:\OpenCppCoverage\OpenCppCoverage.exe `
            --export_type binary:ext_test.cov `
            --sources ext\include `
            --sources ext\src `
            --excluded_sources ext\deps `
            --cover_children `
            --excluded_line_regex "\s*else.*" `
            --excluded_line_regex "\s*\}.*" `
            --excluded_line_regex "\s*\{\s*" `
            --modules php_swow.dll `
            -- C:\tools\php\php.exe C:\tools\php\composer.phar test-extension

      - name: Setup composer dependencies
        run: composer update -o --ignore-platform-reqs

      - name: Run library tests
        shell: pwsh
        run: |
          & C:\OpenCppCoverage\OpenCppCoverage.exe `
            --export_type binary:lib_test.cov `
            --sources ext\include `
            --sources ext\src `
            --excluded_sources ext\deps `
            --cover_children `
            --excluded_line_regex "\s*else.*" `
            --excluded_line_regex "\s*\}.*" `
            --excluded_line_regex "\s*\{\s*" `
            --modules php_swow.dll `
            -- C:\tools\php\php.exe C:\tools\php\composer.phar test-library

      - name: Fail if anything failed
        if: steps.ext-test.outcome != 'success'
        run: exit 1

      - name: Upload coverage tests results
        shell: pwsh
        run: |
          if ("${{ secrets.CODECOV_TOKEN }}" -Eq "") {
            Write-Host "No CODECOV_TOKEN set, skipping coverage tests"
            exit 0
          }
          # merge results
          & C:\OpenCppCoverage\OpenCppCoverage.exe `
            --input_coverage=ext_test.cov `
            --input_coverage=lib_test.cov `
            --export_type cobertura:coverage.xml `
            --sources ext\include `
            --sources ext\src `
            --excluded_sources ext\deps `
            --excluded_line_regex "\s*else.*" `
            --excluded_line_regex "\s*\}.*" `
            --excluded_line_regex "\s*\{\s*" `
            --modules php_swow.dll `
            -- C:\tools\php\php.exe -dextension=swow --ri swow
          & C:\Codecov\codecov.exe -f coverage.xml -t ${{ secrets.CODECOV_TOKEN }}
